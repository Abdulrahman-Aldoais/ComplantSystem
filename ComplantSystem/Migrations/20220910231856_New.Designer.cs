// <auto-generated />
using System;
using ComplantSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComplantSystem.Migrations
{
    [DbContext(typeof(AppCompalintsContextDB))]
    [Migration("20220910231856_New")]
    partial class New
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComplantSystem.Compalints_Solution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentSolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSolution")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionProvIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionProvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadsComplainteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserId");

                    b.ToTable("Compalints_Solutions");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("originatorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.BenefCommunication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BeneficiariesId")
                        .HasColumnType("int");

                    b.Property<string>("CommunDescribed")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TypeCommunicationId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BenefCommunication");
                });

            modelBuilder.Entity("ComplantSystem.Models.Communication_Counter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BenefCommunicationId")
                        .HasColumnType("int");

                    b.Property<string>("BenefCommunicationsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BeneficiarieId")
                        .HasColumnType("int");

                    b.Property<int>("Communic_Counter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BenefCommunicationsId");

                    b.ToTable("Communication_Counter");
                });

            modelBuilder.Entity("ComplantSystem.Models.ComplaintsRejected", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateSolution")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedProvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedUserProvIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadsComplainteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserId");

                    b.ToTable("ComplaintsRejecteds");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Directorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GovernorateId = 2,
                            Name = "شرعب السلام"
                        },
                        new
                        {
                            Id = 2,
                            GovernorateId = 2,
                            Name = "شرعب الرونة"
                        },
                        new
                        {
                            Id = 3,
                            GovernorateId = 1,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 4,
                            GovernorateId = 1,
                            Name = "الحيمة"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "صنعاء"
                        },
                        new
                        {
                            Id = 2,
                            Name = " تعز"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الحديدة"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.LimitationOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserResponsibleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LimitationOrders");
                });

            modelBuilder.Entity("ComplantSystem.Models.Proposal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BeneficiarieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSubmeted")
                        .HasColumnType("datetime2")
                        .HasComment("تحديد وقت ادخال الصف في قاعدية البيانات");

                    b.Property<string>("DescProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitileProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("ComplantSystem.Models.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Societys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جمعية البن"
                        },
                        new
                        {
                            Id = 2,
                            Name = "جمعية الالبان"
                        },
                        new
                        {
                            Id = 3,
                            Name = "جمعية الحبوب"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.StagesComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StagesComplaints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "العزلة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "المديرية"
                        },
                        new
                        {
                            Id = 3,
                            Name = "المحافظة"
                        },
                        new
                        {
                            Id = 4,
                            Name = "الإتحاد العام"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.Statistics.StutusCompalintStatistic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalCountStutus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("stutus")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("StutusCompalintStatistics");
                });

            modelBuilder.Entity("ComplantSystem.Models.Statistics.TypeCompalintStatistic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TypeComp")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("TypeCompalintStatistics");
                });

            modelBuilder.Entity("ComplantSystem.Models.Statistics.UsersInStatistic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Users")
                        .HasColumnType("float");

                    b.Property<string>("totalUsers")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UsersInStatistics");
                });

            modelBuilder.Entity("ComplantSystem.Models.StatusCompalint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusCompalints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جديدة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "محلولة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "مرفوضة"
                        },
                        new
                        {
                            Id = 4,
                            Name = "معلقة"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.ToTable("SubDirectorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorateId = 1,
                            Name = " القفاعة"
                        },
                        new
                        {
                            Id = 2,
                            DirectorateId = 1,
                            Name = " المخلاف"
                        },
                        new
                        {
                            Id = 3,
                            DirectorateId = 3,
                            Name = " بني سعد"
                        },
                        new
                        {
                            Id = 4,
                            DirectorateId = 4,
                            Name = " الاحبوب"
                        },
                        new
                        {
                            Id = 5,
                            DirectorateId = 4,
                            Name = "غوبر"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeCommunication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersNameAddType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeCommunications");

                    b.HasData(
                        new
                        {
                            Id = "9d506f47-1725-4b41-bb6f-739a4c15e588",
                            CreatedDate = new DateTime(2022, 9, 11, 2, 18, 55, 335, DateTimeKind.Local).AddTicks(4153),
                            Type = "تماطل",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        },
                        new
                        {
                            Id = "0785737f-776c-4dd9-871c-64abe3eedcc6",
                            CreatedDate = new DateTime(2022, 9, 11, 2, 18, 55, 335, DateTimeKind.Local).AddTicks(4660),
                            Type = "تلاعب بالحلول",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeComplaint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersNameAddType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeComplaints");

                    b.HasData(
                        new
                        {
                            Id = "3ef0d8e9-e7a0-4f87-b258-0eb074f87825",
                            CreatedDate = new DateTime(2022, 9, 11, 2, 18, 55, 336, DateTimeKind.Local).AddTicks(2592),
                            Type = "زراعية",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        },
                        new
                        {
                            Id = "5e037fbe-0c78-48ca-b609-14337d491055",
                            CreatedDate = new DateTime(2022, 9, 11, 2, 18, 55, 336, DateTimeKind.Local).AddTicks(3090),
                            Type = "فساد",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropBeneficiarie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("StagesComplaintId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCompalintId")
                        .HasColumnType("int");

                    b.Property<int>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("TitleComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCommunicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeComplaintId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("StagesComplaintId");

                    b.HasIndex("StatusCompalintId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("TypeCommunicationId");

                    b.HasIndex("TypeComplaintId");

                    b.ToTable("UploadsComplaintes");
                });

            modelBuilder.Entity("ComplantSystem.Models.UsersCommunication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BenfId")
                        .HasColumnType("int");

                    b.Property<string>("BenfName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenfPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("NameUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Titile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCommuncationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("TypeCommuncationId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersCommunications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cfd23ce8-c1f4-4848-9e69-6f298938d6bb",
                            ConcurrencyStamp = "94b8f2f7-5dab-43e3-afae-159de774fe4f",
                            Name = "AdminGeneralFederation",
                            NormalizedName = "ADMINGENERALFEDERATION"
                        },
                        new
                        {
                            Id = "bd3be5a5-d612-4253-97a0-a36b5683d1df",
                            ConcurrencyStamp = "2667e5f3-780e-4fbf-8133-a7ea04d466f8",
                            Name = "AdminGovernorate",
                            NormalizedName = "ADMINGOVERNORATE"
                        },
                        new
                        {
                            Id = "6db4062c-512f-4842-bc61-14b924c56020",
                            ConcurrencyStamp = "b9b445f8-1b5a-419b-b36c-f7830b991730",
                            Name = "AdminDirectorate",
                            NormalizedName = "ADMINDIRECTORATE"
                        },
                        new
                        {
                            Id = "f4c40998-7ee0-4132-97bc-41ee6f7fa3ee",
                            ConcurrencyStamp = "582406f9-2fcc-4b1c-aae9-68a361559543",
                            Name = "AdminSubDirectorate",
                            NormalizedName = "ADMINSUBDIRECTORATE"
                        },
                        new
                        {
                            Id = "c2ad7ca8-6452-4f89-832e-201321094762",
                            ConcurrencyStamp = "304f8e56-e167-4243-b43b-2ed99d9b0308",
                            Name = "Beneficiarie",
                            NormalizedName = "BENEFICIARIE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComplantSystem.Compalints_Solution", b =>
                {
                    b.HasOne("ComplantSystem.Models.UploadsComplainte", "CompalintsHasSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UploadsComplainteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "UserAddSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UserId");

                    b.Navigation("CompalintsHasSolution");

                    b.Navigation("UserAddSolution");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("Users")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("Users")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Society", "Societies")
                        .WithMany("Users")
                        .HasForeignKey("SocietyId");

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("Users")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");

                    b.Navigation("Societies");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.Communication_Counter", b =>
                {
                    b.HasOne("ComplantSystem.Models.BenefCommunication", "BenefCommunications")
                        .WithMany("CommunicationCounters")
                        .HasForeignKey("BenefCommunicationsId");

                    b.Navigation("BenefCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.ComplaintsRejected", b =>
                {
                    b.HasOne("ComplantSystem.Models.UploadsComplainte", "CompalintsRejected")
                        .WithMany("ComplaintsRejecteds")
                        .HasForeignKey("UploadsComplainteId");

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "UserRejectComplaint")
                        .WithMany("ComplaintsRejecteds")
                        .HasForeignKey("UserId");

                    b.Navigation("CompalintsRejected");

                    b.Navigation("UserRejectComplaint");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("Directorates")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("SubDirectorates")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId");

                    b.HasOne("ComplantSystem.Models.StagesComplaint", "StagesComplaint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StagesComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.StatusCompalint", "StatusCompalint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StatusCompalintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.TypeCommunication", null)
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("TypeCommunicationId");

                    b.HasOne("ComplantSystem.Models.TypeComplaint", "TypeComplaint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("TypeComplaintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");

                    b.Navigation("Society");

                    b.Navigation("StagesComplaint");

                    b.Navigation("StatusCompalint");

                    b.Navigation("SubDirectorate");

                    b.Navigation("TypeComplaint");
                });

            modelBuilder.Entity("ComplantSystem.Models.UsersCommunication", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.TypeCommunication", "TypeCommunication")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("TypeCommuncationId");

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "User")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("UserId");

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");

                    b.Navigation("SubDirectorate");

                    b.Navigation("TypeCommunication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Compalints_Solutions");

                    b.Navigation("ComplaintsRejecteds");

                    b.Navigation("UserRoles");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.BenefCommunication", b =>
                {
                    b.Navigation("CommunicationCounters");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.Navigation("SubDirectorates");

                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.Governorate", b =>
                {
                    b.Navigation("Directorates");

                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.Society", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplantSystem.Models.StagesComplaint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.StatusCompalint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeCommunication", b =>
                {
                    b.Navigation("UploadsComplainte");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeComplaint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.Navigation("Compalints_Solutions");

                    b.Navigation("ComplaintsRejecteds");
                });
#pragma warning restore 612, 618
        }
    }
}
